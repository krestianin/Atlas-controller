import json
from flask import Flask, request, jsonify, render_template
from Service import scan_network, fetch_temperature, set_fan_speed, save_to_json,load_configurations 
from flask import Flask, render_template, request, redirect, url_for, flash, session
from flask_wtf import FlaskForm
from wtforms import IntegerField, SelectField, SubmitField, StringField
from wtforms.validators import DataRequired, IPAddress, Optional

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your_secret_key'  # Change to a real secret key in production

default_settings = {
    'controller_ip': '172.18.2.6', 
    "start_ip": '10.11.1.42',
    "end_ip": '10.11.1.45',
    # "last_host_digit": 70,
    "temp_low": 55,
    "temp_high": 63,
    "fan_speed_low": 3,
    "fan_speed_high": 5,
    "fan_speed_normal": 4
}

class FanControlForm(FlaskForm):
    # Выбор конфигурации (необязательно)
    controller_select = SelectField('Выбрать конфигурацию (необязательно)', coerce=str, choices=[], validators=[Optional()])
    # IP адрес контроллера
    controller_ip = StringField('IP адрес контроллера', validators=[DataRequired(), IPAddress()])
    # Начальный IP
    start_ip = StringField('Начальный IP', validators=[DataRequired(), IPAddress()])
    # Конечный IP
    end_ip = StringField('Конечный IP', validators=[DataRequired()])
    # Нижний порог температуры
    temp_low = IntegerField('Нижний порог температуры (°C)', validators=[DataRequired()])
    # Верхний порог температуры
    temp_high = IntegerField('Верхний порог температуры (°C)', validators=[DataRequired()])
    # Скорость вентилятора для низкой температуры
    fan_speed_low = IntegerField('Скорость для низкой температуры', validators=[DataRequired()])
    # Скорость вентилятора для высокой температуры
    fan_speed_high = IntegerField('Скорость для высокой температуры', validators=[DataRequired()])
    # Скорость вентилятора для нормальной температуры
    fan_speed_normal = IntegerField('Скорость для нормальной температуры', validators=[DataRequired()])
    # Установить параметры
    submit = SubmitField('Установить параметры')

class NetworkScanForm(FlaskForm):
    # Начальный IP адрес
    start_ip = StringField('Начальный IP адрес', validators=[DataRequired(), IPAddress()])
    # Конечный IP адрес
    end_ip = StringField('Конечный IP адрес', validators=[DataRequired()])
    # Сканировать сеть
    submit = SubmitField('Сканировать сеть')
# @app.route('/', methods=['GET', 'POST'])
# def index():
#     form = FanControlForm()
#     if form.validate_on_submit():
#         session['settings'] = {
#             "hosts": [host.strip() for host in form.hosts.data.split(',')],
#             "temp_low": form.temp_low.data,
#             "temp_high": form.temp_high.data,
#             "fan_speed_low": form.fan_speed_low.data,
#             "fan_speed_high": form.fan_speed_high.data,
#             "fan_speed_normal": form.fan_speed_normal.data
#         }
#         flash('Settings updated successfully! Starting monitoring...')
#         return redirect(url_for('monitor'))
#     return render_template('index.html', form=form)

# @app.route('/', methods=['GET', 'POST'])
# def configure():
#     form = FanControlForm()
#     if form.validate_on_submit():
#         try:
#             # Store the form data in the session
#             session['settings'] = {
#                 "start_ip": form.start_ip.data,
#                 "end_subnet": form.end_subnet.data,
#                 "last_host_digit": form.last_host_digit.data,
#                 "temp_low": form.temp_low.data,
#                 "temp_high": form.temp_high.data,
#                 "fan_speed_low": form.fan_speed_low.data,
#                 "fan_speed_high": form.fan_speed_high.data,
#                 "fan_speed_normal": form.fan_speed_normal.data
#             }
#             flash('Configuration saved successfully! Starting monitoring...', 'success')
#             return redirect(url_for('monitor'))
#         except Exception as e:
#             flash(f'Failed to save configuration: {e}', 'error')
#             return render_template('index.html', form=form)

#     # Pre-fill the form with data from the session if available
#     if 'settings' in session:
#         form.process(data=session['settings'])

#     return render_template('index.html', form=form)
@app.route('/configure', methods=['GET', 'POST'])
def configure():
    form = FanControlForm()

    configurations = load_configurations()  # This should fetch a list of configurations
    form.controller_select.choices = [(config['controller_ip'], config['controller_ip']) for config in configurations]


    if form.validate_on_submit():
        if 'save' in request.form:
            return save_config(form)
        # elif 'load' in request.form:
        #     selected_config = json.loads(form.controller_select.data)
        #     form.process(data=selected_config)  # Pre-fill form with selected configuration
        # Store the form data in the session
        session['settings'] = form.data  # This captures all form data
        flash('Configuration saved successfully! Starting monitoring...')
        return redirect(url_for('monitor'))
    
    # print(session['settings'])
    # Pre-fill the form with session data if available, otherwise use defaults
    if 'settings' in session:
        form_data = session['settings']
    else:
        form_data = default_settings  # Use default values if no session data

    form.process(data=form_data)  # This pre-fills the form

    return render_template('index.html', form=form)


@app.route('/')
def home():
    return render_template('home.html')


@app.route('/ping_status')
def ping_status():
    # Fetch the latest list of hosts and their status, which could be stored in session or database
    # Assuming hosts are stored in the session for simplicity
    hosts = session.get('hosts', [])
    return render_template('table.html', hosts=hosts)

@app.route('/monitor', methods=['GET', 'POST'])
def monitor():
    # Retrieve settings from session, ensuring some default values if none found
    settings = session.get('settings', {
        'controller_ip': '172.18.2.6',  
        'temp_high': 63,  # Default high temperature threshold
        'temp_low': 55,   # Default low temperature threshold
        'fan_speed_normal': 3,  # Default normal fan speed
        'fan_speed_high': 5,    # Default high fan speed
        'fan_speed_low': 4      # Default low fan speed
    })

    # Fetch IP range and scan network
    start_ip = settings.get('start_ip', '10.11.1.42')  # Default start IP
    end_ip = settings.get('end_ip', '10.11.1.45')
    controller_ip = settings.get('controller_ip', '172.18.2.6')
    # last_host_digit = settings.get('last_host_digit', 70)  # Default last host digit

    hosts = scan_network(start_ip, end_ip)  # Adjust your scan_network function to handle the range directly
    session['hosts'] = hosts 
    # ['10.11.1.42', '10.11.1.43']   # change

    # Fetch temperatures from the active hosts
    temperatures = [fetch_temperature(host) for host in hosts if host]
    
    if not temperatures:
        return jsonify({'error': 'No valid temperature data found'}), 400

    # Calculate the average temperature
    average_temp = sum(temperatures) / len(temperatures)

    # Determine fan speed based on average temperature
    if average_temp >= settings['temp_high']:
        fan_speed = settings['fan_speed_high']
    elif average_temp >= settings['temp_low']:
        fan_speed = settings['fan_speed_low']
    else:
        fan_speed = settings['fan_speed_normal']

    # Set the fan speed using the determined value
    set_fan_speed(fan_speed, controller_ip)

    session['last_fan_speed'] = fan_speed  # Store the last set fan speed in the session
    # Return the results as JSON
    flash(f'Fan speed set to {fan_speed}. Monitoring updated.')
    return redirect(url_for('configure'))

@app.route('/monitor_status')
def monitor_status():
    # Access monitoring information, possibly from session or a database
    monitoring_info = session.get('monitoring_info', 'No recent monitoring data.')
    return render_template('monitor_status.html', monitoring_info=monitoring_info)


@app.route('/table', methods=['GET', 'POST'])
def table():
    form = NetworkScanForm()
    if request.method == 'POST':
        if form.validate_on_submit():
            # Process form data and handle it via AJAX
            start_ip = form.start_ip.data
            end_ip = form.end_ip.data
            session['start_ip'] = start_ip
            session['end_ip'] = end_ip
            # Perform the scanning
            # hosts = scan_network(start_ip, end_ip, 45)  # Adjust the last parameter as needed
            # Return JSON data to update the table dynamically
            return jsonify(), 200
        else:
            # If form data is invalid, return an error in JSON
            return jsonify({'error': 'Form validation failed'}), 400
    # For GET requests, render the form page
    table_data = session.get('table_data', [])
    print(table_data)
    return render_template('table.html',form=form, table_data=table_data)
    # return render_template('table.html', form=form)


@app.route('/scan', methods=['GET'])
def scan():
    start_ip = session.get('start_ip')
    end_ip = session.get('end_ip')
    print(start_ip, end_ip  )
    if start_ip and end_ip:
        hosts = scan_network(start_ip, end_ip)  
        return jsonify([{'ip': host, 'status': 'Active', 'temperature': str(fetch_temperature(host))} for host in hosts]) 
    return jsonify({'error': 'IP addresses not set'}), 400

@app.route('/save_table', methods=['POST'])
def save_table():
    data = request.get_json()
    session['table_data'] = data
    save_to_json(data, "table.json")
    return jsonify({"message": "Table data saved successfully"})

@app.route('/temperature', methods=['POST'])
def temperature():
    # Example endpoint to fetch temperature
    ip = request.json.get('ip')
    temp = fetch_temperature(ip)
    return jsonify({'temperature': temp})

@app.route('/set_speed', methods=['POST'])
def speed():
    # Example endpoint to set fan speed
    speed = request.json.get('speed')
    print(speed)
    return jsonify({'status': 'Speed set successfully'}, {'speed': speed})



@app.route('/save_config', methods=['POST'])
def save_config(form):
    # form = FanControlForm()
    # if form.validate_on_submit():
    data = {
        "controller_ip": form.controller_ip.data,
        "start_ip": form.start_ip.data,
        "end_ip": form.end_ip.data,
        "temp_low": form.temp_low.data,
        "temp_high": form.temp_high.data,
        "fan_speed_low": form.fan_speed_low.data,
        "fan_speed_normal": form.fan_speed_normal.data,
        "fan_speed_high": form.fan_speed_high.data
    }
    if save_to_json(data, "configurations.json"):
        session['settings'] = data 
        flash('Configuration saved successfully!')
        return redirect(url_for('configure'))
    else:
        flash('Failed to save configuration.')
    return redirect(url_for('configure'))
    # return render_template('index.html', form=form)

@app.route('/get_config/<controller_ip>')
def get_config(controller_ip):
    configurations = load_configurations("configurations.json")
    config_data = next((item for item in configurations if item.get('controller_ip') == controller_ip), None)
    if config_data:
        session['settings'] = config_data  # Store in session
        flash('Configuration loaded successfully!')
        return redirect(url_for('configure'))
    else:
        flash('Configuration not found', 'error')
        return redirect(url_for('configure'))



if __name__ == '__main__':  
    app.run(debug=True, host='0.0.0.0', port=5000)
